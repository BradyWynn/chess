﻿﻿using ChessChallenge.API;
using System;
using System.Numerics;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel.DataAnnotations;
using System.Runtime.InteropServices;

public class EvilBot : IChessBot
{
    double[,] q_w1 = new double[384, 16];
    double[,] q_w2 = new double[16, 16];
    double[,] q_w3 = new double[16, 1];
    double[,] b1 = {{1.3717538118362427, -0.03288765624165535, 0.021739497780799866, 0.08549930155277252, 0.12717509269714355, -0.035676684230566025, -0.21389664709568024, 1.2536784410476685, -1.7207821607589722, -0.21072843670845032, -0.13441701233386993, -0.17358312010765076, -0.19534540176391602, 0.022817961871623993, 0.003808186622336507, 0.030388742685317993}};
    double[,] b2 = {{-1.6138792037963867, -1.6458343267440796, 1.3639216423034668, -1.7950388193130493, 2.360456705093384, 0.2312425822019577, 0.2543066143989563, -4.705078125, 0.7226905226707458, 0.4010615944862366, 0.5292894244194031, 1.0432865619659424, 1.4152036905288696, 2.9231112003326416, 2.064948558807373, -0.994742214679718}};
    double[,] b3 = {{0.5977680087089539}};
    
    double w1_S = 0.05531225726008415;
    double w1_Z = -160.235595703125;

    double w2_S = 0.031838398426771164;
    double w2_Z = -203.4945068359375;

    double w3_S = 0.000737123133148998;
    double w3_Z = -130.75396728515625;
    public EvilBot(){
        UInt64[] w1 = {11574427658387300513, 11574709129085755552, 11646766723106840737, 11646767822618534304, 11646767826913435552, 11574710228597448864, 11574709129068978336, 11574427654109045152, 11574709124774011040, 11574428753603960993, 11646486347641888929, 11574428753587118241, 11646204872665112737, 11574709129085755808, 11574709133364011168, 11574427654092267681, 12081642332175636129, 12801395790410260136, 11789749431336017058, 13162807440075305128, 11790875361240259235, 13664675150314185131, 11938369297409485217, 12734946827114163139, 11935560092631674024, 10929860982740262555, 11720226168666954405, 13161680453610549925, 11575546944061612198, 13232605563507621270, 11938088904330417062, 12943249313303342236, 11936118635495398818, 12083067239063658668, 11861245179310677409, 13378976940918285993, 11862935089960951716, 12442508580870596003, 12008739098015670951, 11941484235059798193, 11647323054515789472, 12154554216581542818, 11575830656698916253, 13447654614688968613, 11502926412921414053, 12439409070462054294, 11721070584923526565, 12871195013521451678, 11939214825896451492, 12515409504773317800, 11862652481246897317, 12223800342324882339, 11648169695732802468, 11649025119787920801, 11862652498460255393, 11936132881784550300, 11788904989326352802, 11719677533670848156, 11646479759195413664, 11720521980144693148, 11502644955191419555, 12078558133239459227, 11792002339267779489, 12079967750197584029, 11652958038957859236, 11509691725079749282, 11720509821460064163, 11000505699805866143, 11722762712296369060, 11218928061285641373, 12005645089643474080, 10851598853041599642, 11859277006419766182, 11289863006673415577, 11862375451661738912, 11641704558603578520, 11572452948572809895, 11433695667472802203, 11644509498916906402, 12294447211590227868, 11367260916222241956, 10932102856716494495, 12370437694430290853, 11144906773874120093, 10930693270343953578, 10707201047578851480, 13378117097643159453, 11140669221784564893, 11068054222948644798, 10920284223476049815, 12440525083906843548, 11926834329194964889, 11641415481870429610, 11432566473257689753, 11644509516130200483, 11716013913867328412, 11584559654278574755, 10862571936221997217, 12227169143427542950, 11143777571170918045, 11151929342359745958, 11500964888657046173, 12672454941321896085, 12507801996571684000, 10998247423467629236, 12154555294551809436, 12368182695133624223, 11131102345374640026, 11712912380963370152, 11004996062226064793, 11717694122823826082, 11357414780904706713, 11574147278644027809, 11502652638854422688, 11574427654092267936, 11574709124790788001, 11646486351936790689, 11646486351936790944, 11646766727418716321, 11574708033852383392, 11646766727401873823, 11574427654092333217, 11574428757898862497, 11502089688867512735, 11646765623612055712, 11646485248130130337, 11574710228563829153, 11574427654109045152, 11135592802521098915, 13682690631201761963, 11637741815667004071, 10928439348464235410, 10995981321630031270, 13023464115503087264, 12080220629715033778, 12010990996517075871, 11860666818913078447, 13661557021222290833, 12295828180963989679, 13892108065268148381, 11859260547785396646, 12296976122291664016, 11630722795546837665, 12682020829148987799, 12430943956644501419, 13884509327691917208, 12942386253262070697, 12077145308244200082, 12360569642297240237, 11356561636801431172, 12292734181096134567, 11721078375809595287, 11930478106550899371, 12657830371050304151, 12430662404424372137, 14603396426818565801, 12367331655551783353, 12002849073767425166, 12649922645221155751, 12801667369866800015, 12002822621802960555, 12511186315189789323, 12076842835355671464, 12949448338164524430, 11498976958982758313, 13089622893964933783, 12366483915141126572, 12655304805762248327, 12148341985044767407, 14458431324660413333, 12435445284367932332, 12728768658023888277, 11712051303974211504, 12873164234265309850, 11860671208403408551, 12366812677175029136, 11863482625627954082, 12654166790001049232, 12221522133093160876, 12083057394914802322, 12150308938063582125, 12658114057818324636, 12148059367606621359, 12583244982836245393, 12220117000132006059, 13523097656433945745, 12293583042660829103, 13016157920516159372, 12291047629194630826, 13233176210092175256, 12361980371146608042, 11427792436790542225, 11720215070520413862, 13370537158282093210, 11788057193063945389, 13088774066609696141, 12364799497552891567, 12727078712829261199, 11574413485497228970, 12512590395481305998, 12653869874784473262, 12869787604109274512, 11930476006429792688, 12076039173423608210, 12795456224771476655, 13515502187327496082, 12361700085741946799, 11283391366813427345, 12078815410704520107, 12944364205205794455, 12151717416770048430, 11426072800366348182, 12007039274815890604, 12509213799784954770, 13516588427958196655, 12926377298916130194, 12438541525788361148, 13158024482657255059, 12146936796215874991, 12366236597453303187, 12508347320550069415, 11929677717720837773, 12006197142978398887, 13158586341906556058, 12505245610579168672, 11213587883113685647, 12437982978814614443, 11800465275803181450, 11566543031059323819, 11064964680787412118, 12220112559219318444, 11935847098854651798, 12149751571769627822, 12517648153280890519, 12361989180325465775, 12073214502516730523, 12077123266654805946, 12512324288065678751, 12509758023647594670, 11934159330974281607, 11209068654804181168, 11135038755834738073, 12004223412265719206, 10423464443916497812, 12155102912595537071, 12224348990441430917, 12728458519374314932, 13509288942127127687, 12579285598160320436, 11933032331404544398, 12363960531928848817, 12510060372551837071, 11856731735667479980, 11070872249205762958, 12009294248491991456, 12017782585035437479, 12510305516499080885, 11718553944455950984, 12510866288903887027, 12654747434951091858, 12440781192805454515, 11570505768626140807, 12725350229596411064, 11713215823875913355, 12867495062736900792, 12433789530922334858, 12580108072082838197, 13012783562261115279, 13009923741709538743, 12434346953270796676, 12434025896460457138, 11431174542993631621, 12725068780489905849, 10130176326973566856, 13017524584155615929, 11573880204477379973, 12727885746459479988, 10563386128939202448, 12941808867787969207, 11284246877408180109, 12870029510120477625, 11714058037016768646, 12871440183606023606, 12510350733196242827, 12727040213478186681, 10274596067043551370, 12649919458521880249, 12149229320443371920, 12726760924573569204, 10632343112917364611, 12369284362616148914, 12506978462278400139, 12724785050705828537, 11429198763414041987, 12728729024449384885, 11572752105141940102, 12510307715505689272, 12291085020660804227, 13014143611602835644, 12222120322750326929, 12866091076917895351, 12507534862677225354, 13081982396705116855, 11935864635224795267, 12440495311343099319, 11063573738197922184, 12802473312324323511, 12079126666632407957, 12727884552291257269, 12511477711021324170, 12511711757527913403, 12224377680370052746, 12220381948224641206, 11784441036240036486, 12871434720356964281, 12431535523597691530, 13444519941814326716, 11503228855593839502, 13231156446235690162, 11434547883406698124, 12441903824309359030, 11072866823344204430, 12580393880899525041, 12149505280477538696, 12436836123475676342, 12495998790704609921, 12507763411271981997, 11785844017522979725, 12725629518401082809, 13298771974108388998, 13008233732090268598, 11938393515993964935, 13088451983302564014, 11788080372400043144, 12718035105689014968, 12727939686318777993, 12083023203132411580, 11573878018219157644, 12441343021805767599, 12728781899323780498, 13095211703347023285, 12363705530041149066, 13301530640475718071, 12135987940293323910, 12147764792962814136, 12217349516078722441, 12359715484785351107, 11573327068454693769, 13369934600693583291, 12083649997307289229, 13008234895741777847, 12146129788253283209, 12159578942374190510, 12143883460530252170, 12151420626091284657, 12569469235641564554, 13309131646348857776, 13009403556059332233, 12871436906395044783, 10900597583292316545, 12364781883840957883, 13352539235217550216, 13225819322507301803, 10772539603016203913, 12802188534669549750, 13066273652052443776, 13592580155868217781, 11566560870912536966, 12443027538279376049, 11358272614253244812, 12875094939134436790, 11215289914832562321, 12442464566817629106, 11139854620738303629, 12799374901593676726, 11355179675092497291, 12510302295223540152, 12294466040340918412, 12586019055317915059, 11283125336572931729, 12943214185248234681, 11726728723032418193, 12510577194856460719, 11000805905152909963, 11565966769894487718, 13648069131475736473, 11493902617843699364, 11646773349971902618, 11708675790761664426, 11789482262844127370, 12149736139666463911, 13519994847538687129, 12441638927789494436, 10421800878480596877, 11642806277944348836, 12509484275082580624, 13073809610494156692, 13659313952679570320, 11066053983514309035, 13738985780674018187, 11565960250554293164, 11423285521126115975, 12210829395414717865, 11284521664798901894, 12139895429313108909, 12439413490132042893, 11855886129822998439, 13445123620407062412, 11643092095249780646, 11428065115470417303, 11858139020741944226, 11783847295767265162, 12003660402469412269, 12802236972741350799, 11926250398376827557, 10855830877088371072, 12363108375705915818, 12796607434517688707, 12072902232892806834, 14165422462314461839, 11498696647656967589, 14311491546776383629, 12291609355367589548, 12006513767935423635, 11499821435318475172, 13015313491154420366, 12218425886655483815, 13082576222341934739, 12362540993361910439, 12296430850439687575, 12079095755871127729, 13808792597209534092, 11645620985114173873, 11788924836252727438, 12076561497968384680, 12297274115661345168, 12437697118793147313, 13009678494464655249, 11855043921229420457, 12800257864762965140, 12075996284584630960, 11500427304445131914, 11859263795049437099, 12220710748675621005, 12295268568451553716, 12150063836797647250, 12073187041250224809, 11578942304484572050, 12076841800352634280, 14448875464922475662, 11936946443364243883, 14381594123576525460, 12147492045460578472, 13736454567977796761, 12653306920653460657, 12364817132220298638, 11855887310787153833, 12725382213448089489, 12436288653038363313, 12150622367480855442, 11857294638409880489, 11070882140162339719, 12651056190236825778, 11571621798934463379, 11790017682761821875, 11790612586718809489, 11932163632157398698, 12074060095392498572, 12081063967784011950, 10561696140895899286, 12436288657098446760, 12944664363106877582, 12221805845848299958, 11569662430574983570, 12361414165725023143, 11212178185105952922, 12218427008431074482, 11719401599622367376, 12359450386284908453, 13585020991550506126, 12213082290729623976, 11863522297839136146, 12074034691835212468, 11069754101882013328, 12068964842981655723, 12440259100205957003, 12078248058476992951, 12508092314987315353, 12505811881162087333, 11503499288308335767, 12148056120762408627, 10852453186512338322, 12358039713285645995, 11939512844816921745, 12001684618896845733, 12227180271149170054, 11358792499156793528, 14886558062835050129, 11494476627573309597, 13386002811361021074, 11860947203354306231, 10489356006945961612, 11928784923387468975, 11718262509787002765, 12508923473484946104, 11940634402596631437, 12432345829791996582, 12012133371646357651, 12008732564344826799, 9760887701855835799, 13007666277421794197, 10262484904163591559, 13949169283928467412, 11638374180561265032, 14743765352498373837, 10854740282933617034, 14808241886726817487, 8981802471733310323, 14737310154023602897, 7392888361637166733, 15025820931124855509, 8762813835828767619, 14591781045031040465, 7319967560577950302, 15032567504444358601, 9905607790642311245, 15242835062839540445, 9200499595233184341, 13799708240172254150, 11713270885707651178, 14378141443153233363, 11502429665239546485, 14951225642491804116, 9843131327673778039, 14593193926181943500, 9555196698708520818, 15025823086931505614, 8111790827585775989, 15314334963897496529, 11066711838958203499, 15241137133621846995, 12936561156017857631, 14741806257760332244, 11641478110047224167, 15030312345595708106, 10784092304964303497, 14812462821302172625, 8612242332621322365, 14880296207513516240, 9843133573740604020, 14809362280083521233, 10776238454838897525, 15314893537144632784, 12147861618102349181, 15098164410904967637, 9985566500487669361, 15023290971816427477, 11642891077326711143, 14664404861520083150, 9483123698122334818, 14811626084531928267, 8900745413376196208, 15170775084844676559, 12080300017285835635, 15098160016918932689, 10635764939098728562, 14949818344733243857, 9985842494832488311, 14954885942454155734, 11143554498739546988, 15169379791905256400, 11570280471939033704, 15167971312827787729, 10636338746495836018, 14878052181642409169, 12578812928471312225, 14380106339201550538, 12006243468091243892, 14739567408045653715, 11498219622415311223, 14234867480004622804, 10851086608849615219, 15028358650789655000, 10343599414892142440, 15459010971573058775, 10709798333989297519, 14521693814268654805, 12066516419161793127, 15026951301877954511, 13372299735366670447, 14664698521521058261, 11210554197539791719, 14164773485287937230, 11348462685775445100, 14811330410041410253, 12439440114231325555, 15099572867817106384, 10704140186940125817, 15602279582806342351, 12218211777652960111, 15604244431509486033, 12653090578050165617, 15384982052155522768, 12434659433782029160, 15238056438839863503, 12221037187479806570, 14803752661702109137, 12937402092881553248, 14450217690519139534, 13077836198200057957, 14162266632918099913, 10847705752412929395, 14811901073571476943, 13087101949286267502, 14880853655816211156, 12432973895374774118, 14950663912192113616, 12006813087996227183, 14376737542712882639, 11352982584334854248, 15597495633147029971, 11495947807619142000, 14877502434384308438, 10703040452211300445, 14243588750218521802, 13653459229466015590, 13736369691017310916, 15534287045104218228, 14089342717486131666, 14381893451941391724, 14450199156997780171, 14167962556974216547, 15742444169231821263, 13013651338591773039, 14879738848852657857, 12800013961338131825, 12217818985965836985, 13355418675026699091, 15019044695843831236, 12584724864551524194, 10639650532043176079, 13308321219576572058, 10065156694405654936, 13159701349659423887, 10280767686174157207, 13010241422658480523, 10281890227197421979, 12725939614438036883, 10712262155219283098, 14238309058138386843, 10497499045931168662, 13949803834160946587, 10712550253002334618, 14528801107930560158, 10564496631623099800, 14162601081199699356, 10500874469217777317, 12224351261740336019, 11863783882890979232, 12295576482760795790, 10933502595114839181, 12578453362483570601, 11007529448838375063, 13229788649210750373, 11077898227190113432, 12949156989075950010, 10642174928933727129, 12584363220184242849, 10713393600130099864, 12513158817154705567, 10783480886409668248, 12727074344896536232, 10786857259018330532, 10852154110744108422, 11292667929740879007, 12002823781209318808, 11581178745747776154, 11502934173995539111, 11658585463704034713, 12292189978458493105, 11578362904941863325, 11866039049906786474, 11146016266787789983, 10997965870779109797, 11003875797535070622, 12082774816504255919, 11003317232727203993, 12299229081980669612, 10785733738540208802, 11718263527812075927, 11499268324917879466, 11938372587372387998, 12007894840304769182, 11713752325791391646, 12079950192419773857, 11423276699766920615, 12227163864476721312, 10778988230527717029, 10710859212606182314, 11357124586640806561, 11142641805673929886, 11071713380130921637, 11803263588781167767, 11432561014541682603, 12730444318207085465, 14315715656575327399, 12655846809342220961, 12812070910620767395, 11427209583888211628, 11057631921878637980, 11643103206163717029, 10992054896652813471, 12084462686907765924, 10060369377727518631, 12005082216613320867, 10364928605525939112, 12150887242392180640, 10927315677830680999, 12442211678422404511, 12225751980044416679, 12071218859099536291, 10918600738262655648, 11934716762347179693, 12076583204616384158, 12293596193683575716, 10974890386355950238, 12297539252867797931, 10267529458833858465, 12154552159544447912, 10206459168578771106, 12078270070084181926, 8766428935793122721, 12368190331082546334, 10202240441179998367, 12229133961948017060, 10491591241676787108, 12502457287847218350, 13167836533549211805, 12346518930860641185, 10712839222895681945, 12716379262469507494, 11288176442273533855, 12579296563816864674, 9847577564458358437, 12580432440983326120, 9850953133842862500, 12150050484263755941, 9485880011554399389, 12076863605767317161, 10567870891258588833, 12293038591216166054, 11941178506554289564, 11770628953907173294, 11138401951014305947, 12494576984897524136, 11283096552020682651, 12496547314751551652, 11143497037329180825, 12435753035770335157, 10858063896169519530, 12145270842708827300, 9634772538880139682, 12149768979372877476, 8549403968230171294, 12291073708353891750, 9990564588894333599, 12221825315001250218, 9264916558628236448};
        UInt64[] w2 = {15045062732410837729, 16058662876788273391, 15547215147273536972, 14759640508955673286, 15316117713727765949, 14689222402952904117, 15332159460400480457, 14902069041815732418, 12534861095191958735, 14029819672545386203, 13042350501193372378, 14467199896490659706, 15181295525518693580, 15259786401247968962, 14542347328856578546, 12528692886229932228, 14898134980571207899, 14902130614634728071, 15331888989113272012, 14829170304219596742, 16045987748940851363, 14738528807564327107, 15400559000576308930, 14757666902729934784, 16192925358030894277, 14824941633903707071, 13967573163048229582, 14467755274549842640, 15187766100144605900, 15034357857019673018, 12894022048716017604, 14322245802551072437};
        UInt64[] w3 = {4827739272251193548, 11617604531046626762};
        for(int x = 0; x < w1.Length; x++){
            // convert 64 bit int into a binary string with padding to ensure same length
            string str = Convert.ToString((long) w1[x], 2).PadLeft(64, '0');
            // every eight bits is a number, extract it and write to quantized weights
            for(int y = 0; y < 8; y++){
                q_w1[(8 * x + y) / 16, (8 * x + y) % 16] = Convert.ToInt32(str.Substring(y*8, 8), 2);
            }
        }
        for(int x = 0; x < w2.Length; x++){
            // convert 64 bit int into a binary string with padding to ensure same length
            string str = Convert.ToString((long) w2[x], 2).PadLeft(64, '0');
            // every eight bits is a number, extract it and write to quantized weights
            for(int y = 0; y < 8; y++){
                q_w2[(8 * x + y) / 16, (8 * x + y) % 16] = Convert.ToInt32(str.Substring(y*8, 8), 2);
            }
        }
        for(int x = 0; x < w3.Length; x++){
            // convert 64 bit int into a binary string with padding to ensure same length
            string str = Convert.ToString((long) w3[x], 2).PadLeft(64, '0');
            // every eight bits is a number, extract it and write to quantized weights
            for(int y = 0; y < 8; y++){
                q_w3[(8 * x + y) % 16, 0] = Convert.ToInt32(str.Substring(y*8, 8), 2);
            }
        }
    }
    public Move Think(Board board, Timer timer){
        Move[] moves = board.GetLegalMoves();
        // Move bestMove = moves[0];
        // double bestScore = -100;
        // foreach(Move move in moves){
        //     board.MakeMove(move);
        //     double score = Eval(BoardToBit(board));
        //     board.UndoMove(move);
        //     if(score > bestScore){
        //         bestScore = score;
        //         bestMove = move;
        //     }
        // }
        int move = (int)Search(board, 3, -100000, 100000);
        Console.WriteLine(move);
        return moves[move];
    }
    double Eval(double[,] a){
        double[,] q = ReLU(MatAdd(MulMat(MatMul(a, AddMat(q_w1, w1_Z)), w1_S), b1));
                  q = ReLU(MatAdd(MulMat(MatMul(q, AddMat(q_w2, w2_Z)), w2_S), b2));
                  q = MatAdd(MulMat(MatMul(q, AddMat(q_w3, w3_Z)), w3_S), b3);
        return q[0, 0];
    }
    double[,] BoardToBit(Board board){
        double[,] bit = new double[1, 384];
        PieceType[] types = {PieceType.Pawn, PieceType.Knight, PieceType.Rook, PieceType.Bishop, PieceType.Queen, PieceType.King};
        int count = 0;
        int a, b;
        if(board.IsWhiteToMove){
            a = 1;
            b = -1;
        }
        else{
            a = -1;
            b = 1;
        }
        foreach(PieceType type in types){
            string white = new String(Convert.ToString((long)board.GetPieceBitboard(type, true), 2).PadLeft(64, '0').Reverse().ToArray());
            string black = new String(Convert.ToString((long)board.GetPieceBitboard(type, false), 2).PadLeft(64, '0').Reverse().ToArray());
            // Console.WriteLine(white.Length);
            // Console.WriteLine(black.Length);
            for(int i = 0; i < white.Length; i++){
                if(int.Parse(white.Substring(i, 1)) != 0)
                    bit[0, count * 64 + i] = a * int.Parse(white.Substring(i, 1));
            }
            for(int i = 0; i < black.Length; i++){
                if(int.Parse(black.Substring(i, 1)) != 0)
                    bit[0, count * 64 + i] = b * int.Parse(black.Substring(i, 1));
            }
            count += 1; 
        }
        return bit;
    }
    double Search(Board board, int depth, double alpha, double beta){
        Move[] moves = board.GetLegalMoves();
        if(depth == 0){
            return Eval(BoardToBit(board));
        }
        if(board.IsWhiteToMove){
            double maxScore = -1000;
            Move bestMove = new Move();
            foreach(Move m in moves){
                board.MakeMove(m);
                double score = Search(board, depth - 1, alpha, beta);
                if(score > maxScore){
                    maxScore = score;
                    bestMove = m;
                }
                board.UndoMove(m);
                alpha = Math.Max(alpha, score);
                if(beta <= alpha)
                    break;
            }
            if(depth < 3){
                return maxScore;
            }
            else{
                for(int i = 0; i < moves.Length; i++){
                    if(moves[i] == bestMove){
                        return i;
                    }
                }
                return 0;
            }

        }
        else{
            double minScore = 1000;
            Move bestMove = new Move();
            foreach(Move m in moves){
                board.MakeMove(m);
                double score = Search(board, depth - 1, alpha, beta);
                if(score < minScore){
                    minScore = score;
                    bestMove = m;
                }
                board.UndoMove(m);
                beta = Math.Min(beta, score);
                if(beta <= alpha)
                    break;
            }
            if(depth < 3){
                return minScore;
            }
            else{
                for(int i = 0; i < moves.Length; i++){
                    if(moves[i] == bestMove){
                        return i;
                    }
                }
                return 0;
            }

        }
    }
    double[,] MatMul(double[,] a, double[,] b){
        double[,] c = new double[a.GetLength(0), b.GetLength(1)];
        for(int row = 0; row < a.GetLength(0); row++){
            for(int col = 0; col < b.GetLength(1); col++){
                double[] x = new double[a.GetLength(1)];
                for(int i = 0; i < x.Length; i++){
                    x[i] = a[row, i];
                }
                double[] y = new double[b.GetLength(0)];
                for(int i = 0; i < y.Length; i++){
                    y[i] = b[i, col];
                }
                c[row, col] = Dot(x, y);
            }
        }
        return c;
    }
    double[,] MulMat(double[,] a, double b){
        double[,] c = new double[a.GetLength(0), a.GetLength(1)];
        for(int row = 0; row < a.GetLength(0); row++){
            for(int col = 0; col < a.GetLength(1); col++){
                c[row, col] = a[row, col] * b;
            }
        }
        return c;
    }

    double[,] MatAdd(double[,] a, double[,] b){
        double[,] c = new double[a.GetLength(0), a.GetLength(1)];
        for(int row = 0; row < a.GetLength(0); row++){
            for(int col = 0; col < a.GetLength(1); col++){
                c[row, col] = a[row, col] + b[row, col];
            }
        }
        return c;
    }
    double[,] AddMat(double[,] a, double b){
        double[,] c = new double[a.GetLength(0), a.GetLength(1)];
        for(int row = 0; row < a.GetLength(0); row++){
            for(int col = 0; col < a.GetLength(1); col++){
                c[row, col] = a[row, col] + b;
            }
        }
        return c;
    }
    double[,] ReLU(double[,] a){
        double[,] c = new double[a.GetLength(0), a.GetLength(1)];
        for(int row = 0; row < a.GetLength(0); row++){
            for(int col = 0; col < a.GetLength(1); col++){
                c[row, col] = Math.Max(0, a[row, col]);
            }
        }
        return c;
    }
    double Dot(double[] a, double[] b){
        double sum = 0;
        for(int i = 0; i < a.GetLength(0); i++){
            sum += a[i] * b[i];
        }
		return sum;
    }

    // int[,] Transpose(int[,] a){
    //     int[,] b = new int[a.GetLength(1), a.GetLength(0)];
	// 	for(int col = 0; col < a.GetLength(1); col++){
	// 		for(int row = 0; row < a.GetLength(0); row++){
	// 			b[col, row] = a[row, col];
	// 		}
	// 	}
	// 	return b;
    // }
}