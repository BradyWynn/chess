using ChessChallenge.API;
using System;
using System.Linq;
using System.Numerics;

// transposition table implementation taken from https://github.com/Selenaut/Chess-Challenge-Selebot

public class MyBot : IChessBot{
    Matrix4x4[,] q_w1 = new Matrix4x4[96, 4];
    Matrix4x4[,] q_w2 = new Matrix4x4[4, 4];
    Matrix4x4[,] q_w3 = new Matrix4x4[4, 1];
    Matrix4x4[,] b1 = new Matrix4x4[1, 4]{
                    {new Matrix4x4(-0.2105952948331833f, 0.3373734652996063f, -2.665067672729492f, -0.17655938863754272f,
                                    -0.2105952948331833f, 0.3373734652996063f, -2.665067672729492f, -0.17655938863754272f,
                                    -0.2105952948331833f, 0.3373734652996063f, -2.665067672729492f, -0.17655938863754272f,
                                    -0.2105952948331833f, 0.3373734652996063f, -2.665067672729492f, -0.17655938863754272f),
                    new Matrix4x4(-0.18837878108024597f, -0.31420087814331055f, -2.4298295974731445f, 0.8483097553253174f,
                                    -0.18837878108024597f, -0.31420087814331055f, -2.4298295974731445f, 0.8483097553253174f,
                                    -0.18837878108024597f, -0.31420087814331055f, -2.4298295974731445f, 0.8483097553253174f,
                                    -0.18837878108024597f, -0.31420087814331055f, -2.4298295974731445f, 0.8483097553253174f), 
                    new Matrix4x4(-0.16813413798809052f, -0.5404060482978821f, 1.6258624792099f, -0.21038718521595f, 
                                    -0.16813413798809052f, -0.5404060482978821f, 1.6258624792099f, -0.21038718521595f,
                                    -0.16813413798809052f, -0.5404060482978821f, 1.6258624792099f, -0.21038718521595f,
                                    -0.16813413798809052f, -0.5404060482978821f, 1.6258624792099f, -0.21038718521595f),
                    new Matrix4x4(0.9587255716323853f, -0.14954684674739838f, 1.1288930177688599f, -0.3819195330142975f,
                                    0.9587255716323853f, -0.14954684674739838f, 1.1288930177688599f, -0.3819195330142975f,
                                    0.9587255716323853f, -0.14954684674739838f, 1.1288930177688599f, -0.3819195330142975f,
                                    0.9587255716323853f, -0.14954684674739838f, 1.1288930177688599f, -0.3819195330142975f)}};
    Matrix4x4[,] b2 = new Matrix4x4[1, 4]{
                        {new Matrix4x4(-0.37279853224754333f, 2.0980989933013916f, 0.4406026005744934f, 1.8609669208526611f,
                                    -0.37279853224754333f, 2.0980989933013916f, 0.4406026005744934f, 1.8609669208526611f,
                                    -0.37279853224754333f, 2.0980989933013916f, 0.4406026005744934f, 1.8609669208526611f,
                                    -0.37279853224754333f, 2.0980989933013916f, 0.4406026005744934f, 1.8609669208526611f), 
                        new Matrix4x4(-0.4291727840900421f, 1.9326260089874268f, 0.8186648488044739f, 1.2451813220977783f,
                                    -0.4291727840900421f, 1.9326260089874268f, 0.8186648488044739f, 1.2451813220977783f,
                                    -0.4291727840900421f, 1.9326260089874268f, 0.8186648488044739f, 1.2451813220977783f,
                                    -0.4291727840900421f, 1.9326260089874268f, 0.8186648488044739f, 1.2451813220977783f), 
                        new Matrix4x4(1.0008747577667236f, -0.25214970111846924f, -0.650875985622406f, -2.5601110458374023f,
                                    1.0008747577667236f, -0.25214970111846924f, -0.650875985622406f, -2.5601110458374023f,
                                    1.0008747577667236f, -0.25214970111846924f, -0.650875985622406f, -2.5601110458374023f,
                                    1.0008747577667236f, -0.25214970111846924f, -0.650875985622406f, -2.5601110458374023f), 
                        new Matrix4x4(-0.7385462522506714f, -0.7589142322540283f, -0.37014609575271606f, 0.5667510032653809f, 
                                    -0.7385462522506714f, -0.7589142322540283f, -0.37014609575271606f, 0.5667510032653809f,
                                    -0.7385462522506714f, -0.7589142322540283f, -0.37014609575271606f, 0.5667510032653809f,
                                    -0.7385462522506714f, -0.7589142322540283f, -0.37014609575271606f, 0.5667510032653809f)}};
    Matrix4x4[,] b3 = new Matrix4x4[1, 1]{{new Matrix4x4(0.45780158042907715f, 0, 0, 0,
                                    0.45780158042907715f, 0, 0, 0,
                                    0.45780158042907715f, 0, 0, 0,
                                    0.45780158042907715f, 0, 0, 0)}};
    
    float w1_S = 0.037210047245025635f;

    float w2_S = 0.020057767629623413f;

    float w3_S = 0.011218558996915817f;
    // bool searchCancelled => searchTimer.MillisecondsElapsedThisTurn > searchMaxTime;
    // int searchMaxTime;
    // Timer searchTimer;
    Board m_board;
    int moves_searched;
    float[,] m_bits = new float[1, 384];
    int m_depth;

    struct Transposition
    {
        public ulong zobristHash;
        public Move move;
        public float evaluation;
        public sbyte depth;
        public byte flag;
        public float ordering;
    }; 

    private Transposition[] m_TPTable;

    public MyBot(){
        ulong[] w1 = {10121665870570817417, 8399052211618086251, 9832630677592898704, 8825502190403221374, 9402534705481679986, 9978148898741453953, 10702103608272194163, 10340136705150712195, 9470922130041634424, 9472055705088127597, 9047316626524440700, 9333269862353044873, 9258120454689426049, 8899254097232301932, 9398035504118468713, 10199669589180382348, 9836538268634870392, 11638001265480528002, 6803930159765818470, 6444495428014737752, 10412168868537858932, 11205647999738214249, 8394286941126096005, 8756823455744160916, 11061534985805922690, 9044489739297717123, 8317142920044577908, 12203207395839204726, 10991165218789096585, 9554518084647876249, 7606992665036288393, 7532685504450099333, 9836823038036047997, 9908615744479068292, 5869434349449546346, 6590596368466873192, 10846489159825652335, 12504095378322062206, 8611582328923911815, 8540923373871656843, 9692717810341676147, 7531270360071831428, 7382383291479720310, 11774524317510166647, 11931014555314190454, 10417239979204638875, 7889028457151820941, 7819505181447058824, 9548593782602365060, 9404503904903003263, 6515710791447971440, 8895874202666171252, 10919107552256227970, 10995108028815277172, 8678013734745698695, 9042237982382255494, 9548918198964092538, 8684196245629205888, 9687385144316950138, 11272083753225120376, 10997078336404880248, 10199659766439441540, 8830567717346636423, 8180925670105382022, 8611849458508068992, 9476271249530584213, 8602852146367462256, 9762810538394942327, 9186629117930993539, 10921360499027835020, 8315753279367116179, 9183252616338043269, 7891297775919531405, 7603060755705068150, 9619545289953866105, 9331314926519024244, 10058081078725867127, 9909454615982339168, 9118225230827647863, 8539236641179991937, 8611566879758320541, 8539527891501939377, 9540164909819458679, 9331027932691855734, 9621504679854241409, 9479363218162676343, 8744723372928366991, 8965388716638369151, 8611851498516873897, 8035399671239374204, 10627786461735317625, 8251871567624828788, 10199091542467965288, 10125067785484465254, 9050391844600313971, 9194502690414951785, 8972139580493037716, 8539808275473134757, 8817333871024306294, 9113724826952236140, 8829152560402363278, 8540639678430864500, 8458465516274217867, 8816775422179967624, 8035113673527883427, 8107449560156240246, 10045969945411024506, 8682530468147723890, 9327078547140997500, 11059842785854846050, 9125549056456291428, 9199572577151385707, 9618142347360368534, 8901507026891408250, 9258145760602126471, 10630891516900311671, 9907771259149646464, 9404770051611263624, 8176993769211594096, 9042806382616999557, 9258407345452059785, 8246777474771419768, 8970180306774625397, 9761406513670224762, 8535584093700978814, 8897271806550116738, 9760554348990857598, 9762532404954035070, 3928722607927495555, 9984283901969858918, 9671878684738812538, 9255902661703146611, 5229654900388494475, 8326716323764925559, 8034257502080955800, 9040532828507300732, 10777262872771788687, 10272571650092796220, 9619835608788857202, 9048157683943374450, 7455552487949628292, 9047581506369515130, 6887531706740010935, 8253533041235881117, 12289884942289043887, 7967353225023161228, 7116434403657487216, 4432245160407435122, 9340048339042529457, 10780060064779760513, 6602110578269252469, 8254923876514033047, 9768175069201406581, 7750034631231965342, 7964757131437508749, 8813678004140208474, 9550008892588322683, 11355389334405215852, 8397640524488206732, 8202016510641401781, 9552000130376367509, 11137845465923619228, 9048982248917600623, 7532697470028907137, 10268055995701032588, 9267409175880691065, 7675946333487063955, 8611560437223023516, 10273208238485833616, 10849608492349558902, 7024626345519189876, 10273697499550023048, 8322489935455220092, 9408710717878791547, 8112783411053749128, 8185129141511943826, 9480506594728971913, 10489602091441689730, 8395124686759754360, 8898133656010912629, 10201624559763026827, 9193375751546301831, 8679404706898013344, 8322769275597647749, 11354553769306264187, 9985206526711795586, 8827768261656345207, 9836587734595432561, 7677067779044896380, 6526118695471182221, 8182871792516489601, 7607263140317851519, 10417253178244367999, 10417816063639254612, 9189178816256769650, 8036519021170752367, 9550566452760966033, 9198438937629977206, 9106405506565693594, 8608180383794031248, 10345495742140025186, 11929922835294818420, 8830300420309939824, 9264613006426338419, 8690376617704516221, 8399332565224943226, 7958824252576001143, 7606981545233182032, 9480205302404057729, 9984910865156180653, 7524519311415932026, 7745754266339145589, 9269383847544450446, 9910011084831551108, 8971577815914213256, 8322483407070256748, 11210173667832011127, 10129023927206253187, 8253835278515796338, 9834306307392438381, 8409469074690960518, 8832806280107290223, 7958260104343612027, 8181749148346511954, 10128162914609165957, 10416689824362757512, 11640253013669351044, 8187111415299735918, 9763083346264875584, 10135475809612558469, 9188031059327219593, 8610434563170790038, 10561097752980397693, 10561384562356621981, 8967353453304440186, 9108658307290325381, 9770115774720339051, 4726646055205892743, 8254940399086299738, 8969323873235067767, 6235367079278578569, 8903456469631927464, 11710052180776481146, 10696170514595287682, 11133862260823193986, 8823239455400750515, 9261778392503317143, 7886498489436631421, 10128177208595804054, 9047607893658274447, 7096966544413195907, 9761120623150264685, 9103869027999314051, 8972986272278147930, 8765805382875246442, 8545430228882705807, 8834795309341903749, 8979205154034974849, 8029479849111881822, 7885087609857801574, 9768424752292062862, 9771516570081518738, 8319947967531018393, 8244228995411895435, 8763032440674157441, 7681584603464365943, 8535311311552943206, 13083658842062091877, 9193366963656549760, 9842725165168093291, 7816669510760294280, 7100328829008178566, 3646960719701572478, 11140921993428040582, 2842495283848119414, 8970224201272622441, 8607620732476482189, 4939157433432958094, 8317686151470345875, 9260342692007273867, 12437982875282600052, 8618600490455432299, 8826915019728665438, 13290840942946650224, 8829978396144395381, 6673035639778402683, 7240503440306827918, 6518227612018957408, 8474799852094198395, 7322476464767277181, 9686861729371619678, 11713747695845871458, 13007628944158518388, 6883868112287065484, 8031444937895599763, 8394240838426191009, 9123318147147591293, 9122726682872614272, 9187530609084304745, 12289093491099727984, 8472794343202906990, 10131236028135203673, 8247891395477790583, 7961910607063572864, 7465996726925228676, 7033903028975339385, 11489076744655632999, 9325417060349212518, 8544281364776379010, 10129274534001403802, 8459282371458001324, 7528715300904005271, 10132409216084579964, 8619167954067418733, 10265526993998804342, 10696463010122736751, 10990296621648929146, 11572385701530593380, 7244728842082938485, 7747714746908831634, 8115046232190911128, 8042741183796905112, 8884045588508602215, 8895316724366668642, 8045796816701712566, 8764953218701485682, 7883668243141780116, 7452159355872111511, 7682441152835650936, 11068597350805833360, 9334132906066341995, 9911164309872995947, 8761020308037786990, 8689807083329841811, 7594023826367277930, 7170126892242461041, 7682711646252141967, 8763036834123842450, 10334492735618840670, 10476911372975633770, 9041655515863411609, 9185196458371933339, 8240858914929599664, 7816681648455837290, 9123628059673265491, 9339208312024693900, 8467736422160684909, 8170494444512443497, 7967543474089978515, 6530042813815547736, 7316779744566338666, 7744896711660495234, 8619199625189688172, 9627727013508715925, 7827383066162661990, 8743312519120522092, 8968742038089983351, 8256043157709348522, 8023561487056658086, 8322763571847064383, 8763301730946154173, 9771843219625839243, 8034837794978498666, 9333580968310371953, 8541741517394635395, 8460124773442938785, 7738987695651641463, 7529835582963276101, 9483323496074020468, 9483602767514473847, 9035489050876544608, 8172771519972607082, 8827729877835474055, 9045026352142509198, 8463505771998701484, 8315728123425744529, 9988024596036356476, 9050702984968307823, 7308652163351345518, 10840254937701774447, 7744895642279175043, 6017194414027137375, 8181464447847327370, 7606417564452482208, 7607062110733113204, 8039331615753805215, 6656791374509859683, 7891857363081262437, 5743339972038854509, 8900935297889301406, 7887601149293979535, 8330918851740134284, 9696646425736222597, 12434679067839483808, 12200717014469474411, 6457488490414233713, 8970729985196586636, 14799784301287270655, 7545356250763520669, 11580292323617571749, 9264362454728739466, 11138133691313778822, 9986021255364513400, 9120768280780312189, 9846412132513969529, 10282129748762390654, 8758481462978238594, 9046714089641040789, 10849912081274208650, 10417565421561611922, 9550878529480524156, 8970761944181672063, 8472810848929149824, 9631644491716001657, 8686709883578178457, 8325569822244690349, 8400178283476591235, 8904605442505872789, 8036544292909318521, 7388019366929989738, 10557975225739145371, 8527126676048212365, 8905408166843933055, 8259424224818521486, 8976638804237591700, 9048167730885270917, 6954269734878288756, 9620983455860490875, 8185977814531797145, 8759623838463454903, 8108268872379753361, 8612675359176813185, 10200825201538858354, 10994022854258035326, 7529876170451815544, 7961935809950292087, 8971013959777479275, 9193656216600867447, 8758196848428148366, 8399043372191801225, 12075424370077633164, 10849897718450586246, 9190853394175133302, 8756828867034257263, 9341431623235694725, 9555068952876577912, 7893519880413863574, 7963323462730733720, 9264023668496964236, 9624619588009626508, 7388547080684269944, 7169885038438873991, 9265428869808680342, 7676506998351162006, 7957965615563957392, 8039871552482795896, 9409315428654815628, 9336680543851484562, 8326460233221374581, 8106619510766266230, 8323336537934556549, 8688132445920522147, 7753900569646884226, 8258865668549601136, 11282521407697883017, 10994557148609088403, 8245686814618323061, 7239129007990409080, 6966067657666293900, 7393338881092250736, 8609869332321098386, 7670030935060865680, 10129323939262075524, 11570742009108004755, 7243330220360750199, 8902090858440200565, 9191967418181053546, 8474491989290282862, 8036782908323358842, 8618028773971353471, 6742550035035102597, 8039653840994339958, 6596784415480249473, 7963347600226552699, 7317073361951682733, 9260938528694759075, 8183974547230580105, 8471090155845216896, 9480796913781535594, 8832269783141623944, 7672585062167845498, 6955124046970783866, 8903457491499969451, 9982353340477829506, 8690366794962400380, 8836445707113949091, 5876757178413849745, 8039384331209299334, 9054076385139326326, 7744359080974580839, 7947850272655177585, 8757655927459968642, 8897509352617832616, 8610435520900260763, 7966768310338622347, 15318589414537795319, 4363552114412782459, 10564189584105368706, 9325942665512251749, 10695900605763780710, 9463302613012212630, 11573796392279103129, 10358443397579908200, 14680775429233219191, 6815201214910917455, 6748479524932386142, 9046676612746005370, 9341390731088120455, 6944108022017388704, 7028534159764117638, 7402075544570737782, 9203556142662202221, 10200809668554905189, 12790706102559349872, 12291238720311084391, 13732381781958543220, 6514553112777814922, 5947407371244560000, 7258062525310866304, 9708227503817590126, 8176241613047842140, 8980318744330603600, 8911295991766665878, 9268489948918990950, 6875697606583342731, 6589419941692658828, 9924404726894069383, 10572981429191162708, 9196495967658563954, 7750353429893077081, 9123524812332745852, 10928905285930009211, 6513986816741888893, 6014097188352976225, 7258600354067750012, 8267358159093994098, 9332141570286846546, 9262369891189098584, 11427687823900231299, 7605811635015140735, 7448773040111900279, 6014932816988231292, 8915875509137149041, 8915302611838147188, 8400291232510544472, 12009280972162562419, 8327511344912416386, 8328074337362788194, 6011553987557871994, 6163820911841793396, 10212369072754764405, 7906816218948667764, 9410681902026375498, 9764511353835469653, 10780571462542313084, 9767259222722692733, 7158847113868567705, 6156797334828176522, 9348229736296978302, 9563826442416460647, 8544881400868614494, 9703725948894422630, 8907346476943950193, 9194169434893927003, 5218073854906946938, 5079872836714713957, 8339143078727687286, 9276172228108198771, 9118297588026736716, 9767113902286480209, 10492062729460730243, 10203828023946527119, 6802790201858151832, 6229708119723563892, 7834745357639259228, 8842945830311204465, 8182938614156079957, 8833707678164943702, 9191351489972028295, 9191637272820008555, 5582868590064852833, 4648369524231001173, 9131484271297011319, 8338891410320760193, 9915403922976191052, 8614421035783922519, 10281803232581339523, 9405842054190416769, 6291619437790778784, 5502369027538179203, 9132061386270808702, 9852087656684948605, 8901253962618876244, 9260418215068726111, 9979768388923245952, 8260808424195574378, 5804115669932660860, 5164320672701434431, 4807484465372312721, 7618009745797588855, 11730314964956778315, 10053890719888747095, 10349922319833385354, 9615823520654510225, 6719446988611342996, 6231096897416158082, 6969783847537644662, 7905957599034124911, 8615004915363590478, 9035795750635345743, 9829470676663288940, 8689495831316418430, 5446631570660678686, 5384132000784340788, 6753903612960356240, 8050659865837281143, 11646726796368517459, 10418712010711477086, 9111438032020197761, 11694805485565856130, 6505540617690765220, 6814048118498023583, 8843300079314572698, 7761031520864347300, 10418138001369375569, 5619853941800335455, 8814192686292815461, 6391815678599646529, 5882077804521149824, 5871105224052133737, 11203176344743406437, 4646736728424215120, 14968250501443996037, 11431409653411833218, 9488396564761577342, 8324207389476421999, 9339754992337315971, 8687838949075811202, 6376392819748986992, 7169299075563351938, 9189742896156211063, 8545172865168414066, 9545244761602818942, 10777825848644570487, 9550574076462463612, 9479633564745950827, 5151632442766948506, 7097233807308121469, 11128808605120554360, 10559380320749055864, 9040276462231455112, 9538763114131914114, 7459797508516834953, 9543541604367827093, 7529299953495924844, 8033677943722898308, 10341218538409259382, 8544613213950347376, 10479167605732967045, 11134733868735170428, 9405350567847163265, 9334676172339639165, 11564563724823913106, 9403058069073583209, 15099014307507160943, 10766815287882115955, 8616105853187816346, 6867553502683233669, 5661154201354210180, 10199665221215421312, 10051581882757308773, 8898939533811147640, 9109771008327843197, 7171825650742425199, 9621231841836957293, 8390342937450218611, 8834234494287642245, 9325694128606578290, 5800223558034347082, 11061796893012151405, 14947507062389892224, 12420189413410500464, 8821288990913622889, 12707322752288257624, 8454817199137328233, 9195656030935420545, 10555989473563206247, 11493005187782697601, 10618193223301813874, 6599272626954655602, 7813318169254657170, 8466905226918395736, 8826922789054876272, 7956319522555007861, 6810407683800125554, 11709802652152916374, 8822098071938030697, 9687906296185116534, 17192357701468128925, 9387047006700664985, 9781402261992997792, 9628282146720485248, 8322501806978395691, 11709758594160357749, 10907810095747981174, 10041143144965102713, 8318275553571601503, 8392034127128065902, 8970209963304780180, 9407884998163403643, 6303832694102917195, 11348937626733210212, 7089928617305470336, 8526847318871664249, 13362023196963141468, 11700774763651166873, 9267160656526146993, 9268551461524181607, 11780989390484961155, 11925400389416811381, 11481472556814072437, 10041732483883442566, 8029760348710598799, 7887338425689273720, 9190043045531979651, 8965420555277996187, 10627811591187169945, 8034284900649499776, 23246401241773182, 9969703507093783928, 8820439979161124455, 9472050194511067006, 9483602668613564816, 9268825295821444990, 10628068955123517570, 10411916123199869834, 10043154143509445764, 8750649723488869267, 6300386957118175382, 8755129120809055872, 9838547046800196999, 9253345305803391391, 11564264768927671944, 10339582585969026923, 14002065687690451853, 8752617857387896709, 7753345256180120703, 9553959335054901397, 9624917301839168344, 9412653438180561246, 10988093184038373517, 11564568272992903308, 8471138457246666121, 9044243504258915741, 8322229342256004226, 8544023948815136144, 9829808231494290046, 10042880429335413106};
        ulong[] w2 = {9845058629662872752, 9342046405593766550, 10778683656828208875, 11575848261569326480, 12363928720146654269, 10780672523141163413, 9701745015607106303, 11283371597582473103, 9845895345490928018, 9122242983923861150, 12218992216582106762, 11788618110875703720, 12147219370201286541, 11501515722607529138, 9915653899201781896, 10702973502226798747, 10349163807587541398, 9693007059194190997, 11138406477909371531, 11352546099746942098, 11997491162448172187, 14739033431021297045, 11210196899696713865, 9119961429047156877, 10267495390347566481, 10420075611759418772, 9769610150417182353, 9339254504465936524, 12508307797774668436, 11061825390136169366, 9421701499888499852, 11424938963745807496};
        ulong[] w3 = {5764607523386556416, 1369094287072952320, 12610078957006487552, 432345564613443584, 216172785402118144, 8646911284920451072, 13690942867474743296, 18374686479671623680};
        ulong[][] weights = {w1, w2, w3};
        int[] rows = {8, 8, 2};
        Matrix4x4[][,] quantized_weights = {q_w1, q_w2, q_w3};
        float[] zeros = {-126.63147735595703f, -159.31283569335938f, -12.807402610778809f};
        int count = 0;
        foreach(ulong[] w in weights){
            for(int x = 0; x < w.Length; x+=2){
                // convert 64 bit int into a binary string with padding to ensure same length
                string one = Convert.ToString((long) w[x], 2).PadLeft(64, '0');
                string two = Convert.ToString((long) w[x+1], 2).PadLeft(64, '0');

                float[] a = new float[8];
                float[] b = new float[8];
                for(int i = 0; i < 8; i++){
                    // a[i] = Convert.ToInt32(one.Substring(i*8, 8), 2) + zeros[count];
                    // b[i] = Convert.ToInt32(two.Substring(i*8, 8), 2) + zeros[count];
                    a[i] = Convert.ToInt32(one.Substring(i*8, 8), 2) + zeros[count];
                    b[i] = Convert.ToInt32(two.Substring(i*8, 8), 2) + zeros[count];
                }
                // every eight bits is a number, extract it and write to quantized weights
                Matrix4x4 sun = new (a[0], a[1], a[2], a[3],
                                     a[4], a[5], a[6], a[7],
                                     b[0], b[1], b[2], b[3],
                                     b[4], b[5], b[6], b[7]);
                // quantized_weights[count][(8 * x + y) / rows[count], (8 * x + y) % rows[count]] = Convert.ToInt32(str.Substring(y*8, 8), 2) + zeros[count];
                quantized_weights[count][x/rows[count], (x % rows[count])/2] = sun;
            }
            count++;
        }
        m_TPTable = new Transposition[0x800000]; // intializes transposition table with 8 million spaces
    }
    public Move Think(Board board, Timer timer){
        m_board = board;
        InitalizeBits();
        moves_searched = 0;
        // searchMaxTime = timer.MillisecondsRemaining / 50;
        // searchTimer = timer;
        // Console.WriteLine(q_w1[0, 0]);
        // set the best move to the index of the zobristkey
        // we do the bitwise and weirdness because the entire zobrist key is 64 bits
        // or in other words would require an array with 2^64 elements which we
        // don't have the memory to accomadate so instead we do an and operation 
        // with 23 1's in binary to only get the first 23 numbers of the zobrist
        // key which we then use to index into an array of only 2^23 elements
        // which is much more managable
        // Transposition bestMove = m_TPTable[board.ZobristKey & 0x7FFFFF];
        // for(int depth = 1; depth < 5; depth++){
        m_depth = 3;
        Search(m_depth, -100, 100);
        Transposition bestMove = m_TPTable[board.ZobristKey & 0x7FFFFF];
            // Console.WriteLine(depth + " " + timer.MillisecondsElapsedThisTurn + " " + bestMove.move + " " + bestMove.evaluation);

        //     if(searchCancelled){
        //         break;
        //     }
        // }
        // Console.WriteLine(bestMove.evaluation);
        // Console.WriteLine(m_board.GetFenString());
        // Move[] moves = m_board.GetLegalMoves();
        // OrderMoves(ref moves, 0);
        // Console.WriteLine(moves_searched);
        return bestMove.move;
    }
    Matrix4x4[,] Eval(Matrix4x4[,] input){
        moves_searched++;
        // Console.WriteLine(PLUG(MatMul(PLUG(MatMul(PLUG(MatMul(input, q_w1), w1_S, b1), q_w2), w2_S, b2), q_w3), w3_S, b1)[0, 0]);
        return PLUG(MatMul(PLUG(MatMul(PLUG(MatMul(input, q_w1), w1_S, b1, true), q_w2), w2_S, b2, true), q_w3), w3_S, b3, false);
    }
    void InitalizeBits(){
        Array.Clear(m_bits);
        PieceType[] types = {PieceType.Pawn, PieceType.Knight, PieceType.Rook, PieceType.Bishop, PieceType.Queen, PieceType.King};
        bool[] colors = {true, false};
        int count = 0;
        foreach(PieceType type in types){
            foreach(bool color in colors){
                string c = new String(Convert.ToString((long)m_board.GetPieceBitboard(type, color), 2).PadLeft(64, '0').Reverse().ToArray());
                for(int i = 0; i < 64; i++)
                    if(int.Parse(c.Substring(i, 1)) != 0)
                        m_bits[0, count * 64 + i] = (Convert.ToInt32(color) * 2 - 1) * (Convert.ToInt32(m_board.IsWhiteToMove) * 2 - 1) * int.Parse(c.Substring(i, 1));
            }
            count++; 
        }
    }
    // void UpdateBits(Move move){
    //     for(int i = 0; i < 384; i++){
    //         m_bits[0, i] *= -1;
    //     }
    //     m_bits[0, move.StartSquare.Index + 64 * 1] = 0;

    //     if(move.IsCapture){
    //         m_bits[0, move.TargetSquare.Index * (int)move.CapturePieceType] = 0;
    //     }
    //     if(move.IsPromotion){
    //         m_bits[0, move.TargetSquare.Index * (int)move.PromotionPieceType] = 1;
    //     }
    //     else{
    //         m_bits[0, move.TargetSquare.Index + 64 * 1] = -1;
    //     }
    //     if(move.IsCastles){
    //         if(m_board.IsWhiteToMove){
    //             if(move.TargetSquare.Index == 58){
    //                 m_bits[0, 56 + 64 * (int)PieceType.Rook] = 0;
    //                 m_bits[0, 59 + 64 * (int)PieceType.Rook] = 1;
    //             }
    //             if(move.TargetSquare.Index == 62){
    //                 m_bits[0, 63 + 64 * (int)PieceType.Rook] = 0;
    //                 m_bits[0, 61 + 64 * (int)PieceType.Rook] = 1;
    //             }
    //         }
    //         else{
    //             if(move.TargetSquare.Index == 2){
    //                 m_bits[0, 0 + 64 * (int)PieceType.Rook] = 0;
    //                 m_bits[0, 3 + 64 * (int)PieceType.Rook] = 1;
    //             }
    //             if(move.TargetSquare.Index == 6){
    //                 m_bits[0, 7 + 64 * (int)PieceType.Rook] = 0;
    //                 m_bits[0, 5 + 64 * (int)PieceType.Rook] = 1;
    //             }
    //         }
    //     }

    // }
    // float Quiesce(float alpha, float beta){
    //     float stand_pat = Eval(BoardToBit());
    //     float score;
    //     if(stand_pat >= beta) return beta;
    //     if(alpha < stand_pat) alpha = stand_pat;

    //     Move[] moves = m_board.GetLegalMoves(capturesOnly: !m_board.IsInCheckmate());
    //     foreach(Move move in moves){
    //         m_board.MakeMove(move);
    //         score = -Quiesce(-beta, -alpha);
    //         m_board.UndoMove(move);
    //         if(score >= beta) return beta;
    //         if(score > alpha) alpha = score;
    //     }
    //     return alpha;
    // }
    float Search(int depth, float alpha, float beta){
        // if(searchCancelled) return 0;

        float startingAlpha = alpha;
        
        //See if we've checked this board state before
        ref Transposition transposition = ref m_TPTable[m_board.ZobristKey & 0x7FFFFF];
        if(transposition.zobristHash == m_board.ZobristKey && transposition.depth >= depth){
            //If we have an "exact" score (a < score < beta) just use that
            if(transposition.flag == 1) return transposition.evaluation;
            //If we have a lower bound better than beta, use that
            if(transposition.flag == 2 && transposition.evaluation >= beta)  return transposition.evaluation;
            //If we have an upper bound worse than alpha, use that
            if(transposition.flag == 3 && transposition.evaluation <= alpha) return transposition.evaluation;
        }
        
        Move[] moves;
        
        if(m_board.IsDraw()) return 0;
        // if we have reached our depth evaluate the position
        // evaluation function produces values close to 1 for winning positions
        // and values close to 0 for losing positions regardless of color
        if(depth == 0 || (moves = m_board.GetLegalMoves()).Length == 0) {
            if (m_board.IsInCheckmate())
                return -9999999;
            return transposition.evaluation; 
        }

        OrderMoves(ref moves, depth);
        
        float bestEvaluation = -1000;
        Move bestMove = Move.NullMove;

        foreach(Move move in moves){
            m_board.MakeMove(move);
            float evaluation = -Search(depth - 1, -beta, -alpha);
            m_board.UndoMove(move);

            // if(searchCancelled) return 0;

            if(bestEvaluation < evaluation){
                bestEvaluation = evaluation;
                bestMove = move;
            }
            alpha = Math.Max(alpha, bestEvaluation);
            if (alpha >= beta) break;
        }

        // we know this is the best move from this position so update the transposition table
        transposition.evaluation = bestEvaluation;
        transposition.zobristHash = m_board.ZobristKey;
        transposition.move = bestMove;
        if(bestEvaluation < startingAlpha) 
            transposition.flag = 3;
        else if(bestEvaluation >= beta) 
            transposition.flag = 2;
        else transposition.flag = 1;
        transposition.depth = (sbyte)depth;

        return bestEvaluation;

    }
    void OrderMoves(ref Move[] moves, int depth){
        Matrix4x4[,] input = new Matrix4x4[(int)Math.Ceiling((double)moves.Length/4), 96];
        float[,] temp_bits = new float[moves.Length, 384];
        for(int row = 0; row < moves.Length; row++){
            m_board.MakeMove(moves[row]);
            InitalizeBits();
            for(int col = 0; col < 384; col++){
                temp_bits[row, col] = m_bits[0, col];
            }
            m_board.UndoMove(moves[row]);
        }
        for(int row = 0; row < input.GetLength(0); row++){
            for(int i = 0; i < input.GetLength(1); i++){
                if(row*4+0 < moves.Length){
                    input[row, i].M11 = temp_bits[row*4+0, 4*i+0];
                    input[row, i].M12 = temp_bits[row*4+0, 4*i+1]; 
                    input[row, i].M13 = temp_bits[row*4+0, 4*i+2]; 
                    input[row, i].M14 = temp_bits[row*4+0, 4*i+3];
                }
                if(row*4+1 < moves.Length){
                    input[row, i].M21 = temp_bits[row*4+1, 4*i+0];
                    input[row, i].M22 = temp_bits[row*4+1, 4*i+1];
                    input[row, i].M23 = temp_bits[row*4+1, 4*i+2];
                    input[row, i].M24 = temp_bits[row*4+1, 4*i+3];
                }
                if(row*4+2 < moves.Length){
                    input[row, i].M31 = temp_bits[row*4+2, 4*i+0];
                    input[row, i].M32 = temp_bits[row*4+2, 4*i+1];
                    input[row, i].M33 = temp_bits[row*4+2, 4*i+2];
                    input[row, i].M34 = temp_bits[row*4+2, 4*i+3];
                }
                if(row*4+3 < moves.Length){
                    input[row, i].M41 = temp_bits[row*4+3, 4*i+0];
                    input[row, i].M42 = temp_bits[row*4+3, 4*i+1];
                    input[row, i].M43 = temp_bits[row*4+3, 4*i+2];
                    input[row, i].M44 = temp_bits[row*4+3, 4*i+3];
                }
            }
        }

        // pass to neural network eval
        Matrix4x4[,] logits = Eval(input);

        // write matrix returned to array so it can sorted
        float[] movePriorities = new float[moves.Length];
        // Console.WriteLine(logits.GetLength(0));
        for(int i = 0; i < logits.GetLength(0); i++){
            if(i*4+0 < moves.Length){
                movePriorities[i*4+0] = logits[i, 0].M11;
            }
            if(i*4+1 < moves.Length){
                movePriorities[i*4+1] = logits[i, 0].M21;
            }
            if(i*4+2 < moves.Length){
                movePriorities[i*4+2] = logits[i, 0].M31;
            }
            if(i*4+3 < moves.Length){
                movePriorities[i*4+3] = logits[i, 0].M41;
            }
        }
        // write to transposition table so we don't have to recompute already seen positions
        for(int i = 0; i < moves.Length; i++){
            m_board.MakeMove(moves[i]);
            ref Transposition transposition = ref m_TPTable[m_board.ZobristKey & 0x7FFFFF];
            if(depth == 1){
                transposition.evaluation = movePriorities[i];
                transposition.flag = 1;
            }
            transposition.ordering = 1 - movePriorities[i];
            m_board.UndoMove(moves[i]);
            // Console.WriteLine(moves[i] + " " + movePriorities[i]);
        }
        Array.Sort(movePriorities, moves);
        // Array.Reverse(moves);
        // Console.WriteLine();
        // Console.WriteLine(moves.Length);
        // Console.WriteLine(input.GetLength(0) + " " + input.GetLength(1));
        // Console.WriteLine();
    }
    static Matrix4x4[,] MatMul(Matrix4x4[,] a, Matrix4x4[,] b){
        int rowsA = a.GetLength(0);
        int colsA = a.GetLength(1);
        int colsB = b.GetLength(1);

        Matrix4x4[,] c = new Matrix4x4[rowsA, colsB];

        for (int row = 0; row < rowsA; row++){
            for (int col = 0; col < colsB; col++){
                Matrix4x4 z = new();
                for (int i = 0; i < colsA; i++){
                    z += a[row, i] * b[i, col];
                }
                c[row, col] = z;
            }
        }

        return c;
    }
    Matrix4x4[,] PLUG(Matrix4x4[,] a, float scale, Matrix4x4[,] bias, bool hasReLU){
        for(int row = 0; row < a.GetLength(0); row++){
            for(int col = 0; col < a.GetLength(1); col++){
                a[row, col] *= scale;
                a[row, col] += bias[0, col];
            }
        }
        if(hasReLU){
            for(int row = 0; row < a.GetLength(0); row++){
                for(int i = 0; i < a.GetLength(1); i++){
                    a[row, i].M11 = Math.Max(0, a[row, i].M11);
                    a[row, i].M12 = Math.Max(0, a[row, i].M12);
                    a[row, i].M13 = Math.Max(0, a[row, i].M13);
                    a[row, i].M14 = Math.Max(0, a[row, i].M14);

                    a[row, i].M21 = Math.Max(0, a[row, i].M21);
                    a[row, i].M22 = Math.Max(0, a[row, i].M22);
                    a[row, i].M23 = Math.Max(0, a[row, i].M23);
                    a[row, i].M24 = Math.Max(0, a[row, i].M24);
                    
                    a[row, i].M31 = Math.Max(0, a[row, i].M31);
                    a[row, i].M32 = Math.Max(0, a[row, i].M32);
                    a[row, i].M33 = Math.Max(0, a[row, i].M33);
                    a[row, i].M34 = Math.Max(0, a[row, i].M34);

                    a[row, i].M41 = Math.Max(0, a[row, i].M41);
                    a[row, i].M42 = Math.Max(0, a[row, i].M42);
                    a[row, i].M43 = Math.Max(0, a[row, i].M43);
                    a[row, i].M44 = Math.Max(0, a[row, i].M44);
                }
            }
        }
        return a;
    }
    void PrintMatrix4x4(Matrix4x4[,] a){
        for(int r1 = 0; r1 < a.GetLength(0); r1++){
            for(int c1 = 0; c1 < a.GetLength(1); c1++){
                Matrix4x4 a_ = a[r1, c1];
                Console.WriteLine(a_.M11 + " " + a_.M12 + " " + a_.M13 + " " + a_.M14 + " ");
                Console.WriteLine(a_.M21 + " " + a_.M22 + " " + a_.M23 + " " + a_.M24 + " ");
                Console.WriteLine(a_.M31 + " " + a_.M32 + " " + a_.M33 + " " + a_.M34 + " ");
                Console.WriteLine(a_.M41 + " " + a_.M42 + " " + a_.M43 + " " + a_.M44 + " ");
            }
        }
    }
}