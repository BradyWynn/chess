using ChessChallenge.API;
using System;
using System.Numerics;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel.DataAnnotations;

public class MyBot : IChessBot
{
    double[,] q_w1 = new double[384, 16];
    double[,] q_w2 = new double[16, 16];
    double[,] q_w3 = new double[16, 1];
    public MyBot(){
        UInt64[] w1 = {11574710228580671904, 11646766723123749031, 11646485252441941923, 11574428757899322275, 11574710228698244005, 11646766753222206885, 11646492957647152546, 11576401290433241760, 12079678557381632165, 11791450380202714533, 11792013317238007204, 11936125198272930980, 11935278595794314406, 11718548361268471457, 11575840543781331360, 11936127414492569759, 11935845948021841826, 11863790531515490981, 11864347979599226276, 12007054689035461793, 11646484157292650916, 11574148399680824483, 11502938524762809249, 11719954619460460959, 11935842640930643875, 11862943916168815521, 11647614450850308514, 11863503550441169570, 11790880824572945062, 11646207076017022628, 11503215593119982756, 11790884118896878752, 11647050422944047265, 11719112406438289821, 11720236107254832555, 12007903516289772439, 11863783934396176313, 11862659117054671257, 11574705877629376940, 11645652879592238241, 11361341308375179681, 12364555371646394784, 10932938537143738537, 13373910378654771610, 11073403299354483375, 12439401357186346904, 11646766761661929643, 11646495118216178594, 11576954396103910050, 12221273609072714400, 11146295465700663456, 12653051868098896033, 11001065334145851809, 12367626337486217633, 11719105792138387872, 11718542846479933601, 11574428757915640224, 11574710232875638938, 11646767822635309729, 11646766727401480600, 11646486347541223591, 11574709103315429284, 11646478655221638314, 11572739869501598372, 11142354798880924833, 11644241162245808556, 10999941667689180339, 12079967724578321323, 11865477182555138986, 12296130645749115557, 11862952781149808044, 11649883885984394411, 12444478944767159215, 12946629182349881254, 12369881487559861927, 12296424210991327135, 11938105483155972011, 12442231525852818344, 12371289940278618284, 12656988106992954530, 12008742491024827044, 12078561466570155172, 11505475132464604329, 12369326191120001448, 12154268322387044520, 12439686147878725801, 11719673178910927274, 11863793860250020522, 11865200135638788779, 12225206635163462562, 12153150144932192931, 12153432719436719019, 12225771792595397536, 12297830447507546287, 12298102031308074917, 12367627484243404209, 11719399361978151339, 11793696725459381159, 12367077702944663464, 11578655349500520614, 12656717678605018811, 11939512823713282988, 12802510708524428456, 12369040335663048877, 12081089325407186342, 12152606994744583853, 12014386271408795052, 13523369244865965216, 12441384902000943273, 12154554234198600104, 12512879571636955307, 12010445587308129191, 12514554115095504813, 12439128712696802715, 11576969772338617254, 12225209925157758632, 12153992383471986864, 12369045785623965870, 12082484515401936555, 12509775633400638372, 11215837398810993830, 12009042670633920173, 12155407446497996205, 12731301920282357164, 12586334619402349744, 12368193741539553458, 11864361229792359086, 12010446738477461172, 12514848814444491948, 12514571746037509296, 12443642233849950388, 12732431187544421552, 12875427038490833075, 12588876733353079730, 13018974912926429874, 12443644441446757040, 12732996332326924463, 13020104102811578288, 12732717052044751019, 12948608350575176624, 12876548553235476656, 12875984507981836461, 12731588923049946548, 12659807327905232050, 12730463044567872181, 12371582436494194092, 12731867138180361393, 12731030401291432368, 12516825757725601965, 13020669226001673641, 12877388588709161394, 13091033589245129402, 12443921505324284599, 12803924684973979564, 12731018306748132526, 12513729554640842412, 12228041236303228077, 12878808036712164784, 13454412278013997236, 13235145461606692021, 12443072682465211824, 12586626033051349159, 12442795635683403692, 12515702056908467381, 12733001816815220152, 13021508131815274664, 13092148476991023275, 12729332768273116089, 12082231705036634548, 12445056179883324584, 13094401372088215720, 13306073913154382008, 12154012204964296882, 12374120087655330475, 13381505835431275447, 13017840234139465649, 12153166671983915452, 12157663644677684396, 13308888654282534066, 12874585933771223724, 12373553925133085873, 13236568229736657325, 12807301323736329646, 13595437829909753523, 12444198599501198253, 12874860794263874976, 12443918211251806367, 12803081402419552162, 12515137972814717608, 12588596288815278252, 12947181111249251489, 12511175285798642101, 11574148412699948441, 11502941857658542496, 11720807840768172201, 12154267295704721832, 12439423317204117668, 11652388526211245217, 13085666842840965540, 11070034425858335910, 11576969742172595877, 12225202202656286123, 12152015423095024551, 11862943929121613727, 11647617766766649258, 11864352425024400031, 12008192717879943081, 11937819541479860651, 12369030456768310183, 12078560328354080673, 11505183749149532583, 12294732062461634476, 11504915459554651300, 12226049926172026023, 12369032643124438948, 12079120035523044522, 11648468784404277927, 12082212940257339303, 12440252396383741861, 11864632796195038632, 12079967737563424943, 11865480506741665700, 12296981637499954348, 12080806669364538532, 12080247047826744495, 11936983934151471011, 12155114980700562341, 12656430676139287975, 11866040192486188972, 12440261188097911977, 11866883475022588331, 12656141517416147881, 11792015559362324907, 11936699182098262953, 12082218455079299495, 12441664190805551015, 12226052168178182055, 12369606596700383149, 12226052150964759976, 12369602190064330923, 12224924052135390118, 12080808889745647261, 12080815465390579103, 12082498830493130660, 12513440296746329253, 12153991215307859373, 12368746735607328172, 12005927711142685862, 11357977816742012596, 11503501513555621057, 11864079750420283852, 11938388019226201293, 12514560759831514572, 12440829765115301072, 12012439191474196682, 13024916781608782544, 13964762824129040595, 14757676751090930623, 14829457242529710023, 14758518977147684815, 15045067113058783178, 14614413611461757648, 15047581644880531668, 15258133757829371091, 13819242451603608524, 14397949531999423696, 14973009523651694797, 14614414796956683726, 15047885131581607629, 15335826353304817108, 15261802819608237265, 14758522266993349072, 15045909313548832971, 14830016936914504653, 14901800739655110098, 14831710167540552401, 15335267779923333583, 15118808033948454863, 15045345285508157394, 14685625758501556946, 14831147213359600334, 15191151509599604423, 15118530978492893132, 14974419088884354245, 14975263496517502416, 15191431850603434198, 15190298275473315529, 14900103042162936272, 14397099609544052939, 14755429375076780996, 14254128982907405517, 15048437103514144209, 15477131168034181592, 14542347242906441944, 15045335368429263061, 14683086986304607699, 14181221530940593101, 14830873473719717320, 15121074161789552836, 15625474012829238477, 15624627363021901262, 15407885012343574223, 15262075459820507079, 14828318161334421464, 14466914191153813710, 14181218193465986757, 14830019080220493246, 14902349425988189891, 14972173868808979400, 14400487157221542106, 15622641580514007758, 14899524690322837161, 14249041538478680528, 13746051329760546963, 14107766413885215627, 14473107581252635534, 15766726058764373646, 14891662974997401236, 12236442415167083665, 15029509825859195284, 10631748088367256722, 10056131786713633425, 10272311153062482340, 10273996717239149719, 10705501146465998744, 10490170586282039449, 10705779400317114771, 10561403572167742356, 10494679713347507349, 11860115929076897173, 10923649755319211420, 10995982231575829664, 11066352079560548513, 10634289089939022240, 10706628189085606042, 10778693496901507736, 10780668224062789784, 11286198377350994069, 11574709103164429727, 11646478616565751718, 11572729973594629799, 11139821446696970153, 10995703003153410452, 10994869603421230234, 10781519271983094435, 11504066644948984752, 12008753387121389743, 12081350867290206110, 12219561716797644449, 10708051043282756007, 11142944171371898790, 11795120519935141544, 12731569088739322028, 12654729744385354919, 11430601663479326629, 11648462204598461866, 12080528509968427690, 12009038242422368936, 12154273824340879527, 12441094648060487595, 12080249225441946537, 11937541403643193773, 12297827170581589419, 12297263138263116720, 12152870864734105774, 12081936988726406830, 12369608804465028776, 12226617338714040487, 12514290253880141738, 12371580241563855523, 12731305236013687725, 12587183446622973357, 12585493510019198380, 12152869739452804264, 12081648916713220264, 12295862369089267882, 11794273956228803241, 12514848779916716448, 12514562906926981281, 12441379421554778529, 12153151239980425633, 12153713051784290721, 12297536873573753248, 12222947104257056927, 11574710232892350369, 11646767826913436074, 11646767822601824925, 11646766718829370785, 11646484153081110957, 11574147321526594979, 11502662517280056230, 11649296703875688100, 12294160324938343596, 11358550653592186021, 11650147747200017819, 12512027415966751649, 11792293735735992743, 12007912333757228963, 11866041206065046437, 12440520664285423010, 11933309379025412777, 11214428868429654448, 11648458893011038368, 12079680743588012198, 11792010049036002976, 11935288538559848602, 11721093709245225632, 12227449625830400161, 12727355755668218277, 11576116478182794679, 12006766621267179431, 11572738808612366255, 11142083211237502876, 11574714725529787540, 11647917942097351839, 11941197309684260761, 13233739117094738329, 12083048487405066688, 12654152466201952428, 11282818448528288945, 10709447324551917992, 11500392176277366937, 11068089407187229093, 11079044962369250702, 13883667088966782617, 12443912623262439876, 12801650877141730479, 12148923501692366787, 11071412050041226205, 11929641532992511393, 10275460284006900132, 11080174239010104460, 14172761909025344669, 12665210263416118687, 14113614535354851232, 15970226677479350432, 11647589144902803617, 11857025227879915937, 10132430248892015008, 11357973397018615969, 11502370064366084513, 11574428757898928521, 11574710228597442945, 11646766727417135513, 11646486351548881317, 11574710129275807129, 11646741301078366627, 11639977208824046484, 9908369591718089832, 9338677381622425731, 11071424186808828828, 11932748545498782857, 11070855485612394904, 11787161039211698321, 10693942023537856898, 7531035116677726881, 9483606203704713613, 11279714492455423378, 9914834569898332825, 10993711795764631956, 10485120511893935262, 9412960356962442903, 11641121800143673235, 10201384969542538121, 10563637809842981273, 11066644558208670115, 10709163623858152347, 11427764798673361822, 10922224814271471254, 10631197323354347158, 9915135943408785051, 11070863414440401810, 11789190819181466254, 11213565695798447782, 11427486699422131863, 10851031405956601752, 10852428868457306272, 11210179268637663387, 10560561346261326737, 10279069881305108882, 12004231147351544461, 10923657486209813920, 10997961339570069667, 11573003726085989281, 11209902084484997524, 10489602203178865822, 10560273325904666258, 10205336670000026262, 11575273126959945374, 11790868708217757323, 11643105289088961436, 10709158139536317572, 11426360812283659414, 10562804298507654812, 10853265656365096078, 11424396973031853722, 10060061450045397659, 11278304965994126222, 9553995795806260887, 10852705996741973935, 11281124109512585124, 10275696536531739794, 11140654885369057941, 11209063303207884171, 10274874196237847465, 10930135770132621725, 12656402023808867743, 11858705195898609574, 10562502061677586073, 10775893027867498898, 10063748151356527253, 12222100501643302284, 11357979963771161742, 11504051153017802392, 12004787452738705575, 11066071665323059106, 10562503045141734042, 10776144794689378971, 10128200457757825952, 10275146866666217631, 10999939399795384205, 12079387143766511006, 11716848494731697832, 11140674710367283351, 11214138502753589157, 11574125279938323869, 11497019870682652059, 10204779174940220301, 11432554391649619340, 12148360616193395877, 10927313362304673195, 11933865619854044066, 11356826520559264418, 11208769690772087447, 10199709412673886112, 10134695251468066964, 11937814056487916702, 12367626298830659242, 11719095896315439766, 11716009515805218456, 10925896105188563092, 11571047798129857690, 10709184527715310214, 11433116186105775779, 12292179996969444223, 10851586693553946543, 10994582493377572776, 10708019100806785211, 11134766897523375000, 9701738414713051285, 11781328289461212550, 9200758087413499531, 12657573016742824838, 12158479386991625919, 13517718686651563938, 10994841999114216115, 10774452569387479968, 9694990780471681176, 10053933923670464651, 9709658214011276202, 13808796909806791330, 11723890832014221998, 12943513054693469869, 11572152807518547372, 10992066931219868832, 10064035188434575517, 12295581993623657898, 11722497837032647327, 12586906339410354078, 12514554063588662914, 12439115526945276546, 11573594219947917949, 11361068513138736540, 12294719791116950697, 11501773995315603859, 11421835080975881071, 9404217083716398994, 9402843849156432514, 9051295801805013621, 11288716048389535097, 12219232889030932872, 10623871135004592276, 8039631725871535248, 10557129641352794261, 9400553424720795010, 8464947146281812626, 8757412824126493323, 9841650057526545299, 10705220702296576916, 10418376878910051479, 10773334386797746064, 9408736037499801744, 10559696017707536545, 10057545771534819741, 10634291267286179224, 10707185589957793947, 10921388120181611397, 10417003636350223766, 10421784291481851540, 11645632005178561697, 11355997458473984396, 10996529796940401817, 11206528812891019688, 9626044675120539796, 10850475027487823001, 10709995980449945992, 11640848086172534934, 10131314192931133069, 11072263071032839569, 12147502906845532574, 10707739769251667607, 11063258019413268392, 9842209692235311254, 10848487187740661404, 10201109005176577164, 10492990932156976272, 11427787944300941445, 10928150094931854717, 12148069172412513679, 10852703754398830461, 11280550069667855774, 10128742336281026189, 10413867768605478294, 9619002148827010688, 9047588296344371342, 10339594650465111714, 9051827978602717828, 11424953308601812122, 10202483355954748043, 10844824731368721304, 9263520173959911560, 10277923098914752679, 11710654855420356484, 9555103046663898261, 11136162216297141660, 10058940020797316225, 10991219078485279109, 9846984888379606406, 12070937400680220288, 9553714264641274014, 10780634018505334409, 11277441754642418050, 9333013689768968841, 9621519072323864957, 9691920711539064197, 9267996276920518022, 11423805456830006919, 9908633302372616067, 9406187309181141909, 9907221568130618774, 9044783343229834896, 9621526653143781505, 9693861401437700485, 9764812890971407753, 9481650137890916743, 10778961644123424637, 10849313912873516418, 10412750639187460749, 9333017017814519177, 9622371051984750983, 9910027504725886840, 9763103111618459786, 9043946623536237188, 9407326411582768255, 10198831782946963321, 9910022041375832464, 9761704494004539533, 8685900514372652428, 9981242834252827791, 9547483396805791625, 9185531852621842823, 8759656910078707594, 10416136061293398659, 10199685076934624147, 10128465302217003916, 10342947048215776396, 9910041802772876422, 9766763411647792781, 9980983431045483906, 9481076175725757048, 10632027329842542705, 10127617604386845065, 10125936403695110538, 9695549026611071630, 10196844935354420867, 9401389057684964219, 8678869185109130116, 8181222542791115893, 9910890625346336119, 9984061990453475243, 10269187384171539361, 9474311881157747079, 8900367920431990665, 9544666564314761592, 8464422734918154367, 8623163515029979022, 12367315076237987438, 11639422912591457959, 9766469756175427502, 9905807630119972524, 8682815212504394928, 9191405555978907817, 10263324969487346094, 7973533722004270762, 12082784725042637468, 12586629301420072122, 12443632338076482212, 12729897869536568507, 12226897628480453570, 12586044434081891004, 12293906299502116016, 11293520141917925549, 13449080832298888614, 11870295358538884786, 13529583697588040375, 14032284798852183992, 13596558206506088651, 12731015008162991022, 12512885116844617390, 12011865160469622453, 12877964844437779891, 13238555055771464622, 13315928788646997653, 14676860331073901988, 12587197791879931044, 12589165895800366255, 13093000499431780260, 12947450513106904226, 12580142161357742797, 10782924482120175019, 11863800440041614242, 11866884562286781077, 12656419857049490836, 11863270505498121396, 11731221319152612506, 14820117762121439904, 12367611992630534315, 11715433509083458437, 10778438384417998240, 10715359428284358811, 13013890731782216617, 11142094068528163245, 11577494191938842014, 12359461342815297188, 9628867156382753974, 11573030230614652545, 11216687243822793047, 12226602993654519673, 12510617918642813330, 11431462420807783062, 11868816080683308701, 13150888566560562585, 9320051624365627801, 6303230329068558681, 8760229828820031845, 10562803259072406892, 10852999560941628564, 11356276544624170124, 11067975851387948188, 11049974677753339026, 6441674227293393564, 7308379626958658720, 7824033056751919264, 10704102567859757217, 10132134463084208544, 11282252230220161184, 10564495437671211169, 11286197282235523489};
        UInt64[] w2 = {15048730689794265801, 15552289255745309134, 15336073623245541076, 15325103924433573086, 12516861028569767637, 13029698562108085728, 15188898631950655681, 14541794300362015186, 14903782077056012978, 15338932542171689674, 16056987169527614146, 15411531035548762765, 16195457400348773830, 13966421978346538740, 15182420230770455807, 12883323598230847406, 14610396026796748496, 14019079970638188736, 10216122183723303109, 14336364640118818222, 17654021275926245049, 18423892651988138424, 12596780113027774678, 15042240109648336581, 13890700738387428848, 14244526874947875020, 12590297465874336973, 13382682438368284103, 13319050586013681605, 15476040456944993733, 14263125204074350012, 17351469722251934923};
        UInt64[] w3 = {4827739272251193548, 18416144831475141793};
        for(int x = 0; x < w1.Length; x++){
            // convert 64 bit int into a binary string with padding to ensure same length
            string str = Convert.ToString((long) w1[x], 2).PadLeft(64, '0');
            // every eight bits is a number, extract it and write to quantized weights
            for(int y = 0; y < 8; y++){
                q_w1[(8 * x + y) / 16, (8 * x + y) % 16] = Convert.ToInt32(str.Substring(y*8, 8), 2);
            }
        }
        for(int x = 0; x < w2.Length; x++){
            // convert 64 bit int into a binary string with padding to ensure same length
            string str = Convert.ToString((long) w2[x], 2).PadLeft(64, '0');
            // every eight bits is a number, extract it and write to quantized weights
            for(int y = 0; y < 8; y++){
                q_w2[(8 * x + y) / 16, (8 * x + y) % 16] = Convert.ToInt32(str.Substring(y*8, 8), 2);
            }
        }
        for(int x = 0; x < w3.Length; x++){
            // convert 64 bit int into a binary string with padding to ensure same length
            string str = Convert.ToString((long) w3[x], 2).PadLeft(64, '0');
            // every eight bits is a number, extract it and write to quantized weights
            for(int y = 0; y < 8; y++){
                q_w3[(8 * x + y) % 16, 0] = Convert.ToInt32(str.Substring(y*8, 8), 2);
            }
        }
    }
    public Move Think(Board board, Timer timer){
        Move[] moves = board.GetLegalMoves();
        Move bestMove = moves[0];
        // double bestScore = 1;
        // foreach(Move move in moves){
        //     board.MakeMove(move);
        //     double score = Eval(BoardToBit(board));
        //     if(score < bestScore){
        //         bestScore = score;
        //         bestMove = move;
        //     }
        //     board.UndoMove(move);
        // }
        Console.WriteLine(board.GetFenString());
        double[,] a = BoardToBit(board);
        for(int i = 0; i < 384; i++){
            // Console.Write(a[0, i] + ", ");
        }
        return bestMove;
    }
    double Eval(double[,] a){
        double[,] b1 = {{-1.3718,  0.0329, -0.0217, -0.0855, -0.1272,  0.0357,  0.2139, -1.2537, 1.7208,  0.2107,  0.1344,  0.1736,  0.1953, -0.0228, -0.0038, -0.0304}};
        double[,] b2 = {{1.6139,  1.6458, -1.3639,  1.7950, -2.3605, -0.2312, -0.2543,  4.7051, -0.7227, -0.4011, -0.5293, -1.0433, -1.4152, -2.9231, -2.0649,  0.9947}};
        double[,] b3 = {{-0.5977680087089539}};
        
        double w1_S = 0.05531225726008415;
        double w1_Z = 160;

        double w2_S = 0.031838398426771164;
        double w2_Z = 203;

        double w3_S = 0.000737123133148998;
        double w3_Z = 131;

        double[,] q = ReLU(MatAdd(MulMat(MatMul(a, AddMat(q_w1, w1_Z)), w1_S), b1));
        q = ReLU(MatAdd(MulMat(MatMul(q, AddMat(q_w2, w2_Z)), w2_S), b2));
        q = ReLU(MatAdd(MulMat(MatMul(q, AddMat(q_w3, w3_Z)), w3_S), b3));
        return q[0, 0];
    }
    // 285 tokens, 373 tokens to start
    // int[,] FenToArray(String fen){
    //     int[,] bitboards = new int[1, 384];
    //     String[] pieces = {"p", "n", "r", "b", "q", "k", "P", "N", "R", "B", "Q", "K"};
    //     int count = 0;
    //     for(int i = 0; i < 100; i++){
    //         String letter = fen.Substring(i, 1);
    //         if(letter == "/")
    //             continue;
    //         try{
    //             count += int.Parse(letter);
    //         }
    //         catch{
    //             for(int p = 0; p < pieces.Length; p++)
    //                 if(letter == pieces[p])
    //                     if(p > 5)
    //                         bitboards[0, p * 64 + count] = -1;
    //                     else
    //                         bitboards[0, p * 64 + count] = 1;
    //             count += 1;
    //         }
    //         if(count == 64)
    //             break;
    //     }
    //     return bitboards;
    // }
    double[,] BoardToBit(Board board){
        double[,] bit = new double[1, 384];
        PieceType[] types = {PieceType.Pawn, PieceType.Knight, PieceType.Rook, PieceType.Bishop, PieceType.Queen, PieceType.King};
        int count = 0;
        foreach(PieceType type in types){
            string white = Convert.ToString((long)board.GetPieceBitboard(type, true), 2).PadLeft(64, '0');
            string black = Convert.ToString((long)board.GetPieceBitboard(type, false), 2).PadLeft(64, '0');
            Console.WriteLine(white.Length);
            Console.WriteLine(black.Length);
            for(int i = 0; i < white.Length; i++){
                if(int.Parse(white.Substring(i, 1)) != 0)
                    bit[0, count * 64 + i] = int.Parse(white.Substring(i, 1));
            }
            for(int i = 0; i < black.Length; i++){
                if(int.Parse(black.Substring(i, 1)) != 0)
                    bit[0, count * 64 + i] = -1 * int.Parse(black.Substring(i, 1));
            }
            count += 1; 
        }
        return bit;
    }
    double[,] MatMul(double[,] a, double[,] b){
        double[,] c = new double[a.GetLength(0), b.GetLength(1)];
        for(int row = 0; row < a.GetLength(0); row++){
            for(int col = 0; col < b.GetLength(1); col++){
                double[] x = new double[a.GetLength(1)];
                for(int i = 0; i < x.Length; i++){
                    x[i] = a[row, i];
                }
                // Console.Write(x[0] + " " + x[1] + "\n");
                double[] y = new double[b.GetLength(0)];
                for(int i = 0; i < y.Length; i++){
                    y[i] = b[i, col];
                }
                // Console.Write(y[0] + " " + y[1]);
                c[row, col] = Dot(x, y);
            }
        }
        return c;
    }
    double[,] MulMat(double[,] a, double b){
        double[,] c = new double[a.GetLength(0), a.GetLength(1)];
        for(int row = 0; row < a.GetLength(0); row++){
            for(int col = 0; col < a.GetLength(1); col++){
                c[row, col] *= b;
            }
        }
        return c;
    }


    double[,] MatAdd(double[,] a, double[,] b){
        double[,] c = new double[a.GetLength(0), a.GetLength(1)];
        for(int row = 0; row < a.GetLength(0); row++){
            for(int col = 0; col < a.GetLength(1); col++){
                c[row, col] = a[row, col] + b[row, col];
            }
        }
        return c;
    }
    double[,] AddMat(double[,] a, double b){
        double[,] c = new double[a.GetLength(0), a.GetLength(1)];
        for(int row = 0; row < a.GetLength(0); row++){
            for(int col = 0; col < a.GetLength(1); col++){
                c[row, col] += b;
            }
        }
        return c;
    }
    double[,] ReLU(double[,] a){
        double[,] c = new double[a.GetLength(0), a.GetLength(1)];
        for(int row = 0; row < a.GetLength(0); row++){
            for(int col = 0; col < a.GetLength(1); col++){
                c[row, col] = Math.Max(0, c[row, col]);
            }
        }
        return c;
    }
    double Dot(double[] a, double[] b){
        double sum = 0;
        for(int i = 0; i < a.GetLength(0); i++){
            sum += a[i] * b[i];
        }
		return sum;
    }

    // int[,] Transpose(int[,] a){
    //     int[,] b = new int[a.GetLength(1), a.GetLength(0)];
	// 	for(int col = 0; col < a.GetLength(1); col++){
	// 		for(int row = 0; row < a.GetLength(0); row++){
	// 			b[col, row] = a[row, col];
	// 		}
	// 	}
	// 	return b;
    // }
}